#include<iostream>
#include<fstream>
#include<string>
#include<cmath>
#include<vector>
//#include<stdexcept>


class Audio
{
		// RIFF
	const std::string chunkID = "RIFF";
	int chunkSize;
	const std::string format = "WAVE";

		// FMT subchunk
	const std::string SubChunk1_ID = "fmt ";
	const int SubChunk1_size = 16;
	const int audioFormat = 1;
	const int numChannels = 2;
	const int sampleRate = 44100;
	const int byteRate = sampleRate *  numChannels * SubChunk1_size / 8;
	const int blockAlign = numChannels * SubChunk1_size / 8;
	const int bitsPerSample = 16; // sizeof(float)

		// data sub chunk
	const std::string subChunk2_ID = "data";
	int subChunk2_size;

	int frequency, amplitude, duration; // max amp = 32760

	std::vector<double> samples;

	public:
		Audio(int freq = 250, int amp = 1, int length = 5) : frequency(freq), amplitude(amp), duration(length), subChunk2_size(0) {} // subChunk2_size(length * sampleRate * numChannels * (bitsPerSample / 8))

		Audio& generate()
		{

			for(int s = 0; s < duration * sampleRate; s++)
			{
				double chan1 = amplitude * sin(2 * M_PI * s * frequency) / sampleRate;
				double chan2 = amplitude * cos(2 * M_PI * s * (s + 1) * frequency) / sampleRate;

				samples.push_back(chan1);
				samples.push_back(chan2);
			}

				// amp = s / (duruation * sampleRate) *  maxAmp

			subChunk2_size = samples.size() * 2; // data size

			chunkSize = 36 + subChunk2_size;

			return *this;
		}

		friend std::ofstream& operator<<(std::ofstream& outs, const Audio& wav)
		{
			if(wav.samples.size() == 0)
				throw std::string("No Audio Data!!");

			outs << wav.chunkID;

			outs.write(reinterpret_cast<const char *>(&wav.chunkSize), 4);

			outs << wav.format << wav.SubChunk1_ID;

			outs.write(reinterpret_cast<const char *>(&wav.SubChunk1_size), 4);
			outs.write(reinterpret_cast<const char *>(&wav.audioFormat), 2);
			outs.write(reinterpret_cast<const char *>(&wav.numChannels), 2);
			outs.write(reinterpret_cast<const char *>(&wav.sampleRate), 4);
			outs.write(reinterpret_cast<const char *>(&wav.byteRate), 4);
			outs.write(reinterpret_cast<const char *>(&wav.blockAlign), 2);
			outs.write(reinterpret_cast<const char *>(&wav.bitsPerSample), 2);

			outs << wav.subChunk2_ID;

			outs.write(reinterpret_cast<const char *>(&wav.subChunk2_size), 4);

			for(auto& s: wav.samples)
				outs.write(reinterpret_cast<const char *>(&s), 2);

			return outs;
		}

		friend std::ifstream& operator>>(std::ifstream& ins, Audio& wav)
		{
			//ins >> wav.chunkID >> wav.chunkSize >> wav.format >> wav.SubChunk1_ID;

			return ins;
		}
};

int main(int argc, char** argv)
{
	if(argc > 1)
		std::string fn(argv[1]);
	else
		std::string fn("myAudio.wav");

	Audio wav;

	std::ofstream fout("myAudio.wav", std::ios::binary);

	if(!fout)
	{
		std::cerr << "\nFile I/O Error!!" << std::endl;
		return EXIT_FAILURE;
	}

	try {
		fout << wav.generate();
	}
	catch(const std::string& exp)
	{
		std::cerr <<  '\n' << exp << std::endl;
		fout.close();
		return EXIT_FAILURE;
	}

	fout.close();

	return EXIT_SUCCESS;
}
