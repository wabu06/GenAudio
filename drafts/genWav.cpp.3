#include<iostream>
#include<fstream>
#include<string>
#include<cmath>
#include<vector>
//#include<stdexcept>


class Audio
{
		// RIFF
	const std::string chunkID = "RIFF";
	int chunkSize;
	const std::string format = "WAVE";

		// FMT subchunk
	const std::string SubChunk1_ID = "fmt ";
	const int SubChunk1_size = 16;
	const int audioFormat = 1;
	const int numChannels = 2;
	const int sampleRate = 44100;
	const int bitsPerSample = sizeof(float) * 8;
	const int byteRate = sampleRate *  numChannels * bitsPerSample / 8;
	const int blockAlign = numChannels * bitsPerSample / 8;

		// data sub chunk
	const std::string subChunk2_ID = "data";
	int subChunk2_size;

	int frequency, amplitude, duration; // max amp = 32760

	std::vector<float> samples;

	public:
		Audio(int freq = 250, int amp = 1, int length = 5) : frequency(freq), amplitude(amp), duration(length), subChunk2_size(0) {}

		Audio& generate()
		{

			int numSamples = duration * sampleRate;

			float maxAmp = (float) amplitude;

			for(int s = 0; s < numSamples; s++)
			{
				float amp = s / numSamples * maxAmp + 1;
				float chan1 = amp * sin(2 * M_PI * s * frequency);
				//float chan2 = (maxAmp - amp) * cos(2 * M_PI * s * frequency);
				float chan2 = amp * cos(2 * M_PI * s * frequency + amp);

				samples.push_back(chan1); // c1 = cos(2 * pi * f * s + s)
				samples.push_back(chan2); // c2 = sin(2 * pi * s + phase), c1 + c2
			}

				// amp = s / (duruation * sampleRate) *  maxAmp

			subChunk2_size = numSamples * numChannels * bitsPerSample / 8; // data size

			chunkSize = 36 + subChunk2_size;

			return *this;
		}

		friend std::ofstream& operator<<(std::ofstream& outs, const Audio& wav)
		{
			if(wav.samples.size() == 0)
				throw std::string("No Audio Data!!");

			outs << wav.chunkID;

			outs.write(reinterpret_cast<const char *>(&wav.chunkSize), 4);

			outs << wav.format << wav.SubChunk1_ID;

			outs.write(reinterpret_cast<const char *>(&wav.SubChunk1_size), 4);
			outs.write(reinterpret_cast<const char *>(&wav.audioFormat), 2);
			outs.write(reinterpret_cast<const char *>(&wav.numChannels), 2);
			outs.write(reinterpret_cast<const char *>(&wav.sampleRate), 4);
			outs.write(reinterpret_cast<const char *>(&wav.byteRate), 4);
			outs.write(reinterpret_cast<const char *>(&wav.blockAlign), 2);
			outs.write(reinterpret_cast<const char *>(&wav.bitsPerSample), 2);

			outs << wav.subChunk2_ID;

			outs.write(reinterpret_cast<const char *>(&wav.subChunk2_size), 4);

			for(auto& s: wav.samples)
				outs.write(reinterpret_cast<const char *>(&s), sizeof(float));

			return outs;
		}

		friend std::ifstream& operator>>(std::ifstream& ins, Audio& wav)
		{
			std::string insChunkID, insFormat, ins_subChunk1_ID, ins_subChunk2_ID;

			ins >> insChunkID;

			if(!ins.good())
				throw std::string("File Read ERROR!!");

			if( !(insChunkID == "RIFF") )
				throw std::string("Not a WAV File!!");

			ins.seekg(8, std::ios_base::beg);
			ins >> insFormat >> ins_subChunk1_ID;

			if(!ins.good())
				throw std::string("File Read ERROR!!");

			ins.seekg(36, std::ios_base::beg);
			ins >> ins_subChunk2_ID;

			if(!ins.good())
				throw std::string("File Read ERROR!!");

			ins.seekg(4, std::ios_base::beg);
			ins.read(reinterpret_cast<char *>(&wav.chunkSize), 4);

			if(!ins.good())
				throw std::string("File Read ERROR!!");

			ins.seekg(40, std::ios_base::beg);
			ins.read(reinterpret_cast<char *>(&wav.subChunk2_size), 4);

			if(!ins.good())
				throw std::string("File Read ERROR!!");

			return ins;
		}
};

int main(int argc, char** argv)
{
	std::string fn;

	if(argc > 1)
		fn = std::string(argv[1]) + ".wav";
	else
		fn = "myAudio.wav";

	Audio wav;

	std::ofstream fout(fn, std::ios::binary);

	if(!fout)
	{
		std::cerr << "\nFile I/O Error!!" << std::endl;
		return EXIT_FAILURE;
	}

	try {
		fout << wav.generate();
	}
	catch(const std::string& exp)
	{
		std::cerr <<  '\n' << exp << std::endl;
		fout.close();
		return EXIT_FAILURE;
	}

	fout.close();

	return EXIT_SUCCESS;
}
