/*
*
* genWave.cpp, programatically creates wave audio files
*
*/


#include<iostream>
#include<fstream>
#include<string>
#include<cmath>
#include<cstring>
#include<vector>
#include<utility>


struct Chunks
{
		// RIFF
	const char chunkID[4] = {'R', 'I', 'F', 'F'};
	int chunkSize;
	const char format[4] = {'W', 'A', 'V', 'E'};

		// FMT subchunk
	const char SubChunk1_ID[4] = {'f', 'm', 't', 0x20};
	const int SubChunk1_size = 16;
	const short audioFormat = 1;
	const short numChannels = 2;
	const int sampleRate = 44100;
	int byteRate;
	short blockAlign;
	short bitsPerSample;

		// data sub chunk
	const char subChunk2_ID[4] = {'d', 'a', 't', 'a'};
	int subChunk2_size = 0;
};

class Audio
{
	Chunks chunk;
	
	const short bps = sizeof(float) * 8;

	int frequency, amplitude, duration; // max amp = 32760

	std::vector<float> samples;

	public:
		Audio(int freq = 250, int amp = 1, int length = 5) : frequency(freq), amplitude(amp), duration(length)
		{
			chunk.byteRate = chunk.sampleRate *  chunk.numChannels * bps / 8;

			chunk.blockAlign = chunk.numChannels * bps / 8;

			chunk.bitsPerSample = bps;
		}

		Audio& generate()
		{

			int numSamples = duration * chunk.sampleRate;

			float maxAmp = (float) amplitude;

			for(int s = 0; s < numSamples; s++)
			{
				float amp = s / numSamples * maxAmp + 1;
				float chan1 = amp * sin(2 * M_PI * s * frequency);
				//float chan2 = (maxAmp - amp) * cos(2 * M_PI * s * frequency);
				float chan2 = amp * cos(2 * M_PI * s * frequency + amp);

				samples.push_back(chan1); // c1 = cos(2 * pi * f * s + s)
				samples.push_back(chan2); // c2 = sin(2 * pi * s + phase), c1 + c2
			}

				// amp = s / (duruation * sampleRate) *  maxAmp

			chunk.subChunk2_size = numSamples * chunk.numChannels * chunk.bitsPerSample / 8; // data size

			chunk.chunkSize = 36 + chunk.subChunk2_size;

			return *this;
		}

		friend std::ofstream& operator<<(std::ofstream& outs, const Audio& wav)
		{
			if(wav.samples.size() == 0)
				throw std::string("No Audio Data!!");
			
			char* buffer = new char[sizeof(Chunks) + wav.samples.size() * sizeof(float) + sizeof(int) * 3];
			
			std::memcpy(buffer, reinterpret_cast<const char *>(&wav.chunk), sizeof(Chunks));
			
			int offset = sizeof(Chunks);
			std::memcpy(buffer + offset, reinterpret_cast<const char *>(wav.samples.data()), wav.samples.size() * sizeof(float));
			
			offset += wav.samples.size() * sizeof(float);
			int params[] = {wav.frequency, wav.amplitude, wav.duration};
			std::memcpy(buffer + offset, reinterpret_cast<const char *>(params), sizeof(int) * 3);
			
			outs.write(buffer, offset + sizeof(int) * 3);
			
			if(!outs.good())
				throw std::string("File Write ERROR!!");
			
			delete[] buffer;

			return outs;
		}

		friend std::ifstream& operator>>(std::ifstream& ins, Audio& wav)
		{
			char* chunk_buf = new char[sizeof(Chunks)];

			ins.read(chunk_buf, sizeof(Chunks));
			
			if(!ins.good())
				throw std::string("File Read ERROR!!");
			
			int equal[4];
			
			equal[0] = std::memcmp(chunk_buf, wav.chunk.chunkID, 4);
			
			equal[1] = std::memcmp(chunk_buf + 8, wav.chunk.format, 4);
			
			equal[2] = std::memcmp(chunk_buf + 12, wav.chunk.SubChunk1_ID, 4);

			equal[3] = std::memcmp(chunk_buf + 36, wav.chunk.subChunk2_ID, 4);
			
			if( !(equal[0] && equal[1] && equal[2] && equal[3]) )
				throw std::string("Invalid File Format!!");
			
			std::memcpy(reinterpret_cast<char *>(&wav.chunk.chunkSize), chunk_buf + 4, 4);
			
			std::memcpy(reinterpret_cast<char *>(&wav.chunk.byteRate), chunk_buf + 28, 4);
			std::memcpy(reinterpret_cast<char *>(&wav.chunk.blockAlign), chunk_buf + 32, 2);
			std::memcpy(reinterpret_cast<char *>(&wav.chunk.bitsPerSample), chunk_buf + 34, 2);
			
			std::memcpy(reinterpret_cast<char *>(&wav.chunk.subChunk2_size), chunk_buf + 40, 4);
			
			float data[wav.chunk.subChunk2_size / sizeof(float)];
			
			wav.samples = std::vector<float>(wav.chunk.subChunk2_size / sizeof(float));

			ins.read(reinterpret_cast<char *>(data), wav.chunk.subChunk2_size);
			
			if(!ins.good())
				throw std::string("File Read ERROR!!");
			
			wav.samples = std::vector<float>(data, data + wav.chunk.subChunk2_size / sizeof(float));
			
			//int params[3];
			
			//ins.read(reinterpret_cast<char *>(params), sizeof(int) * 3);
			
			/*std::pair<int*, short> params[] = { std::pair<int*, short>(&wav.frequency, 0),
												std::pair<int*, short>(&wav.amplitude, 4),
												std::pair<int*, short>(&wav.duration, 8) };*/
			
			int* params[] = {&wav.frequency, &wav.amplitude, &wav.duration};
			
			//for(auto& [p, o]: params)
			for(auto& p: params)
			{
				ins.read(reinterpret_cast<char *>(p), sizeof(int));
				
				if(!ins.good())
					throw std::string("File Read ERROR!!");
			}
			

			/*if(ins.eof())
			{
				wav.frequency = 250;
				wav.amplitude = 1;
				wav.duration = 5;
			}
			else
			{
				if(ins.good())
				{
					wav.frequency = params[0];
					wav.amplitude = params[1];
					wav.duration = params[2];
				}
				else
					throw std::string("File Read ERROR!!");
			}*/

			delete[] chunk_buf;

			return ins;
		}
};

int main(int argc, char** argv)
{
	std::string fn;

	if(argc > 1)
		fn = std::string(argv[1]) + ".wav";
	else
		fn = "myAudio.wav";

	Audio wav;

	std::ofstream fout(fn, std::ios::binary);

	if(!fout)
	{
		std::cerr << "\nFile I/O Error!!" << std::endl;
		return EXIT_FAILURE;
	}

	try {
		fout << wav.generate();
	}
	catch(const std::string& exp)
	{
		std::cerr <<  '\n' << exp << std::endl;
		fout.close();
		return EXIT_FAILURE;
	}

	fout.close();

	return EXIT_SUCCESS;
}
